<int, INT>
<collatz, ID>
<(, LPAREN>
<int, INT>
<i, ID>
<), RPAREN>
<{, LBRACE>
<int, INT>
<iters, ID>
<=, EQUAL>
<0, INTCONST>
<;, SEMICOLON>
<while, WHILE>
<(, LPAREN>
<i, ID>
<!=, NOTEQ>
<1, INTCONST>
<), RPAREN>
<{, LBRACE>
<if, IF>
<(, LPAREN>
<i, ID>
<%, MODULO>
<2, INTCONST>
<==, ISEQ>
<0, INTCONST>
<), RPAREN>
<{, LBRACE>
<i, ID>
<=, EQUAL>
<i, ID>
</, DIVIDE>
<2, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<else, ELSE>
<{, LBRACE>
<i, ID>
<=, EQUAL>
<3, INTCONST>
<*, TIMES>
<i, ID>
<+, PLUS>
<1, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<iters, ID>
<++, INCR>
<;, SEMICOLON>
<}, RBRACE>
<return, RETURN>
<iters, ID>
<;, SEMICOLON>
<}, RBRACE>
<int, INT>
<main, ID>
<(, LPAREN>
<), RPAREN>
<{, LBRACE>
<for, IF>
<(, LPAREN>
<int, INT>
<i, ID>
<=, EQUAL>
<1, INTCONST>
<;, SEMICOLON>
<i, ID>
<<, LT>
<100, INTCONST>
<;, SEMICOLON>
<i, ID>
<++, INCR>
<), RPAREN>
<{, LBRACE>
<printf, ID>
<(, LPAREN>
<"%d: %d\n", STRINGLIT>
<,, COMMA>
<i, ID>
<,, COMMA>
<collatz, ID>
<(, LPAREN>
<i, ID>
<), RPAREN>
<), RPAREN>
<;, SEMICOLON>
<}, RBRACE>
<return, RETURN>
<collatz, ID>
<(, LPAREN>
<100, INTCONST>
<), RPAREN>
<;, SEMICOLON>
<}, RBRACE>
