root
 └─[0] dec_list
   └─[1] function
     ├─[1] int_type
     ├─[1] id (main)
     ├─[1] params
     ├─[1] dec_list
     │ └─[1] declaration
     │   ├─[1] int_type
     │   └─[1] assignment
     │     ├─[1] id (x)
     │     └─[1] int_const (3)
     └─[2] list
       ├─[3] if_stmt
       │ ├─[3] lt
       │ │ ├─[3] id (x)
       │ │ └─[3] int_const (3)
       │ ├─[3] dec_list
       │ └─[4] list
       │   ├─[4] assignment
       │   │ ├─[4] id (x)
       │   │ └─[4] sum
       │   │   ├─[4] id (x)
       │   │   └─[4] int_const (1)
       │   ├─[4] assignment
       │   │ ├─[4] id (x)
       │   │ └─[4] sum
       │   │   ├─[4] sum
       │   │   │ ├─[4] id (x)
       │   │   │ └─[4] id (x)
       │   │   └─[4] int_const (4)
       │   ├─[5] if_stmt
       │   │ ├─[5] lt
       │   │ │ ├─[5] id (x)
       │   │ │ └─[5] int_const (3)
       │   │ ├─[5] dec_list
       │   │ └─[6] list
       │   │   └─[6] assignment
       │   │     ├─[6] id (x)
       │   │     └─[6] sub
       │   │       ├─[6] id (x)
       │   │       └─[6] int_const (100)
       │   └─[7] if_stmt
       │     ├─[7] gt
       │     │ ├─[7] id (x)
       │     │ └─[7] int_const (3)
       │     ├─[7] dec_list
       │     └─[8] list
       │       └─[8] assignment
       │         ├─[8] id (x)
       │         └─[8] sum
       │           ├─[8] id (x)
       │           └─[8] int_const (1234)
       ├─[9] if_stmt
       │ ├─[9] gt
       │ │ ├─[9] id (x)
       │ │ └─[9] int_const (3)
       │ ├─[9] dec_list
       │ └─[10] list
       │   ├─[10] assignment
       │   │ ├─[10] id (x)
       │   │ └─[10] sum
       │   │   ├─[10] id (x)
       │   │   └─[10] int_const (7)
       │   ├─[10] assignment
       │   │ ├─[10] id (x)
       │   │ └─[10] sum
       │   │   ├─[10] sum
       │   │   │ ├─[10] id (x)
       │   │   │ └─[10] id (x)
       │   │   └─[10] int_const (4)
       │   ├─[11] if_stmt
       │   │ ├─[11] lt
       │   │ │ ├─[11] id (x)
       │   │ │ └─[11] int_const (3)
       │   │ ├─[11] dec_list
       │   │ └─[12] list
       │   │   └─[12] assignment
       │   │     ├─[12] id (x)
       │   │     └─[12] sub
       │   │       ├─[12] id (x)
       │   │       └─[12] int_const (100)
       │   └─[13] if_stmt
       │     ├─[13] gt
       │     │ ├─[13] id (x)
       │     │ └─[13] int_const (3)
       │     ├─[13] dec_list
       │     └─[14] list
       │       └─[14] assignment
       │         ├─[14] id (x)
       │         └─[14] sum
       │           ├─[14] id (x)
       │           └─[14] int_const (1234)
       ├─[15] if_stmt
       │ ├─[15] equal
       │ │ ├─[15] id (x)
       │ │ └─[15] int_const (3)
       │ ├─[15] dec_list
       │ └─[16] list
       │   ├─[16] assignment
       │   │ ├─[16] id (x)
       │   │ └─[16] sum
       │   │   ├─[16] sum
       │   │   │ ├─[16] id (x)
       │   │   │ └─[16] id (x)
       │   │   └─[16] int_const (4)
       │   ├─[17] if_stmt
       │   │ ├─[17] lt
       │   │ │ ├─[17] id (x)
       │   │ │ └─[17] int_const (3)
       │   │ ├─[17] dec_list
       │   │ └─[18] list
       │   │   └─[18] assignment
       │   │     ├─[18] id (x)
       │   │     └─[18] sub
       │   │       ├─[18] id (x)
       │   │       └─[18] int_const (100)
       │   └─[19] if_stmt
       │     ├─[19] gt
       │     │ ├─[19] id (x)
       │     │ └─[19] int_const (3)
       │     ├─[19] dec_list
       │     └─[20] list
       │       └─[20] assignment
       │         ├─[20] id (x)
       │         └─[20] sum
       │           ├─[20] id (x)
       │           └─[20] int_const (1234)
       └─[2] return_stmt
         └─[2] id (x)
.text
.globl main
.type main, @function
# FUNCTION main
main:
	push %rbp
	mov %rsp, %rbp
.main.0:
# (3) <[int][ASSIGN], (int)x, 3>
	mov $3, %rbx
	mov %rbx, %rax
	push %rax
# (4) <[JUMP_LT], <2>, (int)x, 3>
	mov -8(%rbp), %rax
	mov $3, %rbx
	cmp %rax, %rbx
	jl .main.2
# (4) <[JUMP], <8>>
	jmp .main.8
.main.2:
# (5) <[int][ADD], (int)x, (int)x, 1>
	mov -8(%rbp), %rax
	mov $1, %rbx
	add %rax, %rbx
	mov %rbx, %rax
	mov %rax, -8(%rbp)
# (6) <[int][ADD], (int)#0, (int)x, (int)x>
	mov -8(%rbp), %rbx
	add %rbx, %rbx
	mov %rbx, %rax
	push %rax
# (6) <[int][ADD], (int)x, (int)#0, 4>
	mov -8(%rbp), %rax
	mov -16(%rbp), %rbx
	mov $4, %rcx
	add %rbx, %rcx
	mov %rcx, %rax
	mov %rax, -8(%rbp)
# (7) <[JUMP_LT], <5>, (int)x, 3>
	mov -8(%rbp), %rax
	mov $3, %rbx
	cmp %rax, %rbx
	jl .main.5
# (7) <[JUMP], <6>>
	jmp .main.6
.main.5:
# (8) <[int][SUB], (int)x, (int)x, 100>
	mov -8(%rbp), %rax
	mov $100, %rbx
	sub %rbx, %rax
	mov %rax, %rax
	mov %rax, -8(%rbp)
.main.6:
# (10) <[JUMP_GT], <7>, (int)x, 3>
	mov -8(%rbp), %rax
	mov $3, %rbx
	cmp %rax, %rbx
	jg .main.7
# (10) <[JUMP], <8>>
	jmp .main.8
.main.7:
# (11) <[int][ADD], (int)x, (int)x, 1234>
	mov -8(%rbp), %rax
	mov $1234, %rbx
	add %rax, %rbx
	mov %rbx, %rax
	mov %rax, -8(%rbp)
.main.8:
# (14) <[JUMP_GT], <9>, (int)x, 3>
	mov -8(%rbp), %rax
	mov $3, %rbx
	cmp %rax, %rbx
	jg .main.9
# (14) <[JUMP], <15>>
	jmp .main.15
.main.9:
# (15) <[int][ADD], (int)x, (int)x, 7>
	mov -8(%rbp), %rax
	mov $7, %rbx
	add %rax, %rbx
	mov %rbx, %rax
	mov %rax, -8(%rbp)
# (16) <[int][ADD], (int)#0, (int)x, (int)x>
	mov -16(%rbp), %rax
	mov -8(%rbp), %rbx
	add %rbx, %rbx
	mov %rbx, %rax
	mov %rax, -16(%rbp)
# (16) <[int][ADD], (int)x, (int)#0, 4>
	mov -8(%rbp), %rax
	mov -16(%rbp), %rbx
	mov $4, %rcx
	add %rbx, %rcx
	mov %rcx, %rax
	mov %rax, -8(%rbp)
# (17) <[JUMP_LT], <12>, (int)x, 3>
	mov -8(%rbp), %rax
	mov $3, %rbx
	cmp %rax, %rbx
	jl .main.12
# (17) <[JUMP], <13>>
	jmp .main.13
.main.12:
# (18) <[int][SUB], (int)x, (int)x, 100>
	mov -8(%rbp), %rax
	mov $100, %rbx
	sub %rbx, %rax
	mov %rax, %rax
	mov %rax, -8(%rbp)
.main.13:
# (20) <[JUMP_GT], <14>, (int)x, 3>
	mov -8(%rbp), %rax
	mov $3, %rbx
	cmp %rax, %rbx
	jg .main.14
# (20) <[JUMP], <15>>
	jmp .main.15
.main.14:
# (21) <[int][ADD], (int)x, (int)x, 1234>
	mov -8(%rbp), %rax
	mov $1234, %rbx
	add %rax, %rbx
	mov %rbx, %rax
	mov %rax, -8(%rbp)
.main.15:
# (24) <[JUMP_EQ], <16>, (int)x, 3>
	mov -8(%rbp), %rax
	mov $3, %rbx
	cmp %rax, %rbx
	je .main.16
# (24) <[JUMP], <21>>
	jmp .main.21
.main.16:
# (25) <[int][ADD], (int)#0, (int)x, (int)x>
	mov -16(%rbp), %rax
	mov -8(%rbp), %rbx
	add %rbx, %rbx
	mov %rbx, %rax
	mov %rax, -16(%rbp)
# (25) <[int][ADD], (int)x, (int)#0, 4>
	mov -8(%rbp), %rax
	mov -16(%rbp), %rbx
	mov $4, %rcx
	add %rbx, %rcx
	mov %rcx, %rax
	mov %rax, -8(%rbp)
# (26) <[JUMP_LT], <18>, (int)x, 3>
	mov -8(%rbp), %rax
	mov $3, %rbx
	cmp %rax, %rbx
	jl .main.18
# (26) <[JUMP], <19>>
	jmp .main.19
.main.18:
# (27) <[int][SUB], (int)x, (int)x, 100>
	mov -8(%rbp), %rax
	mov $100, %rbx
	sub %rbx, %rax
	mov %rax, %rax
	mov %rax, -8(%rbp)
.main.19:
# (29) <[JUMP_GT], <20>, (int)x, 3>
	mov -8(%rbp), %rax
	mov $3, %rbx
	cmp %rax, %rbx
	jg .main.20
# (29) <[JUMP], <21>>
	jmp .main.21
.main.20:
# (30) <[int][ADD], (int)x, (int)x, 1234>
	mov -8(%rbp), %rax
	mov $1234, %rbx
	add %rax, %rbx
	mov %rbx, %rax
	mov %rax, -8(%rbp)
.main.21:
# (34) <[int][RETURN], (int)x>
	mov -8(%rbp), %rax
	add $16, %rsp
	mov %rsp, %rbp
	pop %rbp
	ret 
