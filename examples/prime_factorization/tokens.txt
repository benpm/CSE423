<int, INT>
<brute_force_fact, ID>
<(, LPAREN>
<int, INT>
<i, ID>
<), RPAREN>
<{, LBRACE>
<for, IF>
<(, LPAREN>
<int, INT>
<n, ID>
<=, EQUAL>
<2, INTCONST>
<;, SEMICOLON>
<n, ID>
<<, LT>
<i, ID>
<;, SEMICOLON>
<n, ID>
<++, INCR>
<), RPAREN>
<{, LBRACE>
<if, IF>
<(, LPAREN>
<i, ID>
<%, MODULO>
<n, ID>
<==, ISEQ>
<0, INTCONST>
<), RPAREN>
<{, LBRACE>
<printf, ID>
<(, LPAREN>
<"%d is not prime! %d divides it!\n", STRINGLIT>
<,, COMMA>
<i, ID>
<,, COMMA>
<n, ID>
<), RPAREN>
<;, SEMICOLON>
<return, RETURN>
<0, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<}, RBRACE>
<printf, ID>
<(, LPAREN>
<"%d is prime!\n", STRINGLIT>
<,, COMMA>
<i, ID>
<), RPAREN>
<;, SEMICOLON>
<return, RETURN>
<0, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<int, INT>
<optimization_congruence_class, ID>
<(, LPAREN>
<int, INT>
<i, ID>
<), RPAREN>
<{, LBRACE>
<int, INT>
<j, ID>
<=, EQUAL>
<5, INTCONST>
<;, SEMICOLON>
<if, IF>
<(, LPAREN>
<i, ID>
<==, ISEQ>
<2, INTCONST>
<||, LOGOR>
<i, ID>
<==, ISEQ>
<3, INTCONST>
<), RPAREN>
<{, LBRACE>
<printf, ID>
<(, LPAREN>
<"%d is prime!\n", STRINGLIT>
<,, COMMA>
<i, ID>
<), RPAREN>
<;, SEMICOLON>
<return, RETURN>
<0, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<if, IF>
<(, LPAREN>
<i, ID>
<%, MODULO>
<2, INTCONST>
<==, ISEQ>
<0, INTCONST>
<||, LOGOR>
<i, ID>
<%, MODULO>
<3, INTCONST>
<==, ISEQ>
<0, INTCONST>
<), RPAREN>
<{, LBRACE>
<printf, ID>
<(, LPAREN>
<"%d is not prime! 2 or 3 divides it\n", STRINGLIT>
<,, COMMA>
<i, ID>
<), RPAREN>
<;, SEMICOLON>
<return, RETURN>
<0, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<while, WHILE>
<(, LPAREN>
<j, ID>
<*, TIMES>
<j, ID>
<<, LT>
<i, ID>
<), RPAREN>
<{, LBRACE>
<if, IF>
<(, LPAREN>
<i, ID>
<%, MODULO>
<j, ID>
<==, ISEQ>
<0, INTCONST>
<||, LOGOR>
<i, ID>
<%, MODULO>
<(, LPAREN>
<j, ID>
<+, PLUS>
<2, INTCONST>
<), RPAREN>
<==, ISEQ>
<0, INTCONST>
<), RPAREN>
<{, LBRACE>
<printf, ID>
<(, LPAREN>
<"%d is not prime! %d divides it!\n", STRINGLIT>
<,, COMMA>
<i, ID>
<,, COMMA>
<j, ID>
<), RPAREN>
<;, SEMICOLON>
<return, RETURN>
<0, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<j, ID>
<=, EQUAL>
<j, ID>
<+, PLUS>
<6, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<printf, ID>
<(, LPAREN>
<"%d is prime!\n", STRINGLIT>
<,, COMMA>
<i, ID>
<), RPAREN>
<;, SEMICOLON>
<return, RETURN>
<0, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<int, INT>
<main, ID>
<(, LPAREN>
<), RPAREN>
<{, LBRACE>
<for, IF>
<(, LPAREN>
<int, INT>
<i, ID>
<=, EQUAL>
<1, INTCONST>
<;, SEMICOLON>
<i, ID>
<<, LT>
<100, INTCONST>
<;, SEMICOLON>
<i, ID>
<++, INCR>
<), RPAREN>
<{, LBRACE>
<brute_force_fact, ID>
<(, LPAREN>
<i, ID>
<), RPAREN>
<;, SEMICOLON>
<optimization_congruence_class, ID>
<(, LPAREN>
<i, ID>
<), RPAREN>
<;, SEMICOLON>
<}, RBRACE>
<return, RETURN>
<0, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
