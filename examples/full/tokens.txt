<int, INT>
<globA, ID>
<=, EQUAL>
<3, INTCONST>
<;, SEMICOLON>
<int, INT>
<globB, ID>
<=, EQUAL>
<4, INTCONST>
<;, SEMICOLON>
<int, INT>
<fun, ID>
<(, LPAREN>
<int, INT>
<XKAD, ID>
<,, COMMA>
<int, INT>
<V, ID>
<), RPAREN>
<{, LBRACE>
<int, INT>
<n1, ID>
<=, EQUAL>
<XKAD, ID>
<+, PLUS>
<V, ID>
<;, SEMICOLON>
<return, RETURN>
<n1, ID>
<*, TIMES>
<80, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<int, INT>
<main, ID>
<(, LPAREN>
<), RPAREN>
<{, LBRACE>
<int, INT>
<n1, ID>
<=, EQUAL>
<15, INTCONST>
<*, TIMES>
<(, LPAREN>
<18, INTCONST>
</, DIVIDE>
<-, MINUS>
<2, INTCONST>
<), RPAREN>
<%, MODULO>
<18, INTCONST>
<;, SEMICOLON>
<int, INT>
<n2, ID>
<=, EQUAL>
<n1, ID>
<*, TIMES>
<n1, ID>
<;, SEMICOLON>
<int, INT>
<n3, ID>
<=, EQUAL>
<n1, ID>
<+, PLUS>
<n1, ID>
<+, PLUS>
<n2, ID>
<+, PLUS>
<n2, ID>
<;, SEMICOLON>
<int, INT>
<DF, ID>
<=, EQUAL>
<8, INTCONST>
<*, TIMES>
<n2, ID>
<;, SEMICOLON>
<for, IF>
<(, LPAREN>
<int, INT>
<i, ID>
<=, EQUAL>
<0, INTCONST>
<;, SEMICOLON>
<i, ID>
<<, LT>
<n2, ID>
<*, TIMES>
<n1, ID>
</, DIVIDE>
<2, INTCONST>
<;, SEMICOLON>
<i, ID>
<+=, PLUSEQUAL>
<1, INTCONST>
<), RPAREN>
<{, LBRACE>
<int, INT>
<f, ID>
<=, EQUAL>
<10, INTCONST>
<;, SEMICOLON>
<break, BREAK>
<;, SEMICOLON>
<for, IF>
<(, LPAREN>
<int, INT>
<j, ID>
<=, EQUAL>
<0, INTCONST>
<;, SEMICOLON>
<j, ID>
<<, LT>
<n2, ID>
<+, PLUS>
<n1, ID>
</, DIVIDE>
<2, INTCONST>
<;, SEMICOLON>
<j, ID>
<+=, PLUSEQUAL>
<1, INTCONST>
<), RPAREN>
<{, LBRACE>
<int, INT>
<x, ID>
<=, EQUAL>
<0, INTCONST>
<;, SEMICOLON>
<while, WHILE>
<(, LPAREN>
<(, LPAREN>
<x, ID>
<<, LT>
<n2, ID>
<), RPAREN>
<||, LOGOR>
<!, NOT>
<(, LPAREN>
<x, ID>
<>=, GE>
<n2, ID>
<), RPAREN>
<), RPAREN>
<{, LBRACE>
<int, INT>
<z, ID>
<=, EQUAL>
<10, INTCONST>
<;, SEMICOLON>
<int, INT>
<x2, ID>
<=, EQUAL>
<3, INTCONST>
<;, SEMICOLON>
<x2, ID>
<+=, PLUSEQUAL>
<z, ID>
<+, PLUS>
<x, ID>
<;, SEMICOLON>
<n2, ID>
<-=, MINUSEQUAL>
<x, ID>
<;, SEMICOLON>
<break, BREAK>
<;, SEMICOLON>
<}, RBRACE>
<}, RBRACE>
<}, RBRACE>
<DF, ID>
<=, EQUAL>
<fun, ID>
<(, LPAREN>
<fun, ID>
<(, LPAREN>
<DF, ID>
<,, COMMA>
<101, INTCONST>
<*, TIMES>
<2, INTCONST>
<), RPAREN>
<,, COMMA>
<9, INTCONST>
<), RPAREN>
<;, SEMICOLON>
<printf, ID>
<(, LPAREN>
<"test: %f\n", STRINGLIT>
<,, COMMA>
<DF, ID>
<), RPAREN>
<;, SEMICOLON>
<DF, ID>
<=, EQUAL>
<DF, ID>
<*, TIMES>
<globA, ID>
<*, TIMES>
<globB, ID>
<;, SEMICOLON>
<if, IF>
<(, LPAREN>
<DF, ID>
<<, LT>
<(, LPAREN>
<8, INTCONST>
<-, MINUS>
<(, LPAREN>
<-, MINUS>
<DF, ID>
<), RPAREN>
<), RPAREN>
<), RPAREN>
<{, LBRACE>
<if, IF>
<(, LPAREN>
<n2, ID>
<!=, NOTEQ>
<10, INTCONST>
<), RPAREN>
<{, LBRACE>
<n1, ID>
<*=, TIMESEQUAL>
<1, INTCONST>
<;, SEMICOLON>
<n1, ID>
<%=, MODEQUAL>
<10, INTCONST>
<;, SEMICOLON>
<n1, ID>
<++, INCR>
<;, SEMICOLON>
<}, RBRACE>
<else, ELSE>
<if, IF>
<(, LPAREN>
<n1, ID>
<<=, LE>
<2, INTCONST>
<&&, LOGAND>
<n2, ID>
<!=, NOTEQ>
<100, INTCONST>
<), RPAREN>
<{, LBRACE>
<DF, ID>
<+=, PLUSEQUAL>
<-, MINUS>
<6, INTCONST>
<;, SEMICOLON>
<if, IF>
<(, LPAREN>
<DF, ID>
<==, ISEQ>
<0, INTCONST>
<), RPAREN>
<{, LBRACE>
<DF, ID>
<=, EQUAL>
<101, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<}, RBRACE>
<else, ELSE>
<{, LBRACE>
<n1, ID>
</=, DIVEQUAL>
<2, INTCONST>
<;, SEMICOLON>
<}, RBRACE>
<}, RBRACE>
<printf, ID>
<(, LPAREN>
<"n1: %d, n2: %d, n3: %d\n", STRINGLIT>
<,, COMMA>
<n1, ID>
<,, COMMA>
<n2, ID>
<,, COMMA>
<n3, ID>
<), RPAREN>
<;, SEMICOLON>
<goto, GOTO>
<label, ID>
<;, SEMICOLON>
<return, RETURN>
<-, MINUS>
<1, INTCONST>
<;, SEMICOLON>
<label, ID>
<:, COLON>
<return, RETURN>
<(, LPAREN>
<n1, ID>
<*, TIMES>
<2, INTCONST>
<), RPAREN>
<;, SEMICOLON>
<}, RBRACE>
