program := declarationList
declarationList := declarationList declaration | declaration
declaration := varDeclaration | funDeclaration
varDeclaration := typeSpecifier varDeclList ;
scopedVarDeclaration := scopedTypeSpecifier varDeclList ;
varDeclList := varDeclList , varDeclInitialize | varDeclInitialize
varDeclInitialize := varDeclId | varDeclId = simpleExpression
varDeclId := ID
scopedTypeSpecifier := typeSpecifier
typeSpecifier := INT | FLOAT | CHAR
funDeclaration := typeSpecifier funName ( params ) statement
funName := ID
params := paramList | eps
paramList := paramList , typeSpecifier paramId | typeSpecifier paramId
paramId := ID
statement := expressionStmt | compoundStmt | selectionStmt | iterationStmt | returnStmt | breakStmt | labelStmt | gotoStmt
expressionStmt := expression ; | ;
expression := mutable assignop expression | unaryAssignExpr | simpleExpression
unaryAssignExpr := unaryAssignop mutable | mutable unaryAssignop
mutable := ID
assignop := = | += | -= | *= | /= | %=
unaryAssignop := ++ | --
simpleExpression := simpleExpression || andExpression | andExpression
andExpression := andExpression && unaryRelExpression | unaryRelExpression
unaryRelExpression := ! unaryRelExpression | relExpression
relExpression := sumExpression relop sumExpression | sumExpression
relop := <= | < | > | >= | == | !=
sumExpression := sumExpression sumop mulExpression | mulExpression
sumop := + | -
mulExpression := mulExpression mulop unaryExpression | unaryExpression
mulop := * | / | %
unaryExpression := unaryMinus | factor
unaryMinus := - unaryExpression
factor := immutable | mutable
immutable := ( expression ) | call | constant
call := ID ( args )
args := argList | eps
argList := argList , expression | argList , STRINGLIT | STRINGLIT | expression
constant := INTCONST
compoundStmt := { localDeclarations statementList }
localDeclarations := localDeclarations scopedVarDeclaration | eps
statementList := statementList statement | eps
selectionStmt := IF ( simpleExpression ) compoundStmt elseIfList | IF ( simpleExpression ) compoundStmt elseIfList elseStmt
elseIfList := elseIfList ELSE IF ( simpleExpression ) compoundStmt | eps
elseStmt := ELSE compoundStmt
iterationStmt := whileStmt | forStmt
whileStmt := WHILE ( simpleExpression ) statement
forStmt := FOR ( varDeclaration relExpression ; expression ) statement
returnStmt := RETURN ; | RETURN expression ;
breakStmt := BREAK ;
labelStmt := ID :
gotoStmt := GOTO ID ;

TERMINALS
_________

INT
FLOAT
CHAR
IF
ELSE
WHILE
FOR
RETURN
BREAK
GOTO
;
,
=
-
%
*
+
<=
<
>
>=
==
!=
!
CHARLIT
INTCONST
FLOATCONST
ID