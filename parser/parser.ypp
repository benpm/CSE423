%{
	#include <cstdio>
	#include <iostream>

	extern int yylex();
	extern int yyparse();
	extern FILE *yyin;

	void yyerror(const char *s);
%}

// Bison fundamentally works by asking flex to get the next token, which it
// returns as an object of type "yystype".  Initially (by default), yystype
// is merely a typedef of "int", but for non-trivial projects, tokens could
// be of any arbitrary data type.  So, to deal with that, the idea is to
// override yystype's default typedef to be a C union instead.  Unions can
// hold all of the types of tokens that Flex could return, and this this means
// we can return ints or floats or strings cleanly.  Bison implements this
// mechanism with the %union directive:
%union {
	int ival;
	float fval;
	char *sval;
	char cval;
}

//Terminals
%token TRUE FALSE
%token <sval> ID
%token <sval> STRINGCONST
%token <ival> INTCONST
%token <fval> FLOATCONST
%token <cval> CHARCONST

//Grammar
%%
constant: FLOATCONST | INTCONST | CHARCONST | STRINGCONST | TRUE | FALSE;
%%

int main(int, char**) {
	// Open a file handle to a particular file:
	FILE *myfile = fopen("../test_files/basic.c", "r");
	// Make sure it is valid:
	if (!myfile) {
		std::cout << "I can't open ../test_files/basic.c!" << std::endl;
		return -1;
	}
	// Set Flex to read from it instead of defaulting to STDIN:
	yyin = myfile;

	// Parse through the input:
	yyparse();
}

void yyerror(const char *s) {
	std::cout << "EEK, parse error!  Message: " << s << std::endl;
	// might as well halt now:
	exit(-1);
}